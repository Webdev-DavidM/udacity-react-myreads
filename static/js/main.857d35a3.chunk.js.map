{"version":3,"sources":["BooksAPI.js","components/Book.js","components/CurrentlyReading.js","components/Read.js","components/WantToRead.js","components/Header.js","components/SearchedBook.js","components/SearchedBooks.js","components/SearchResults.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","getAll","fetch","then","res","json","data","books","update","book","shelf","id","method","body","JSON","stringify","search","query","Book","handleEventChange","e","a","BookAPI","props","target","value","updateBookshelves","className","style","width","height","backgroundImage","this","image","onChange","defaultValue","currentShelf","disabled","title","author","Component","CurrentlyReading","map","imageLinks","smallThumbnail","authors","key","Read","wantToRead","Header","addBookToShelf","SearchedBooks","withRouter","onClick","history","push","clearSearch","searchForBooks","type","placeholder","length","addSearchedBook","BooksApp","state","currentlyReading","read","searchedBooks","showSearchPage","setState","emptyArray","BooksAPI","results","error","filteredResults","filter","allMyBooks","searchedBook","myBook","newArrayOfBooks","booksList","componentDidMount","basename","process","exact","path","render","to","React","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.857d35a3.chunk.js","sourcesContent":["\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8)\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n    .then(data => data.books)\n","import React, { Component, Fragment } from 'react';\nimport * as BookAPI from '../BooksAPI';\n\nexport default class Book extends Component {\n  handleEventChange = async (e) => {\n    await BookAPI.update(this.props.book, e.target.value);\n    this.props.updateBookshelves();\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <li>\n          <div className=\"book\">\n            <div className=\"book-top\">\n              <div\n                className=\"book-cover\"\n                style={{\n                  width: 128,\n                  height: 193,\n                  backgroundImage: `url(${this.props.image})`,\n                }}\n              ></div>\n              <div className=\"book-shelf-changer\">\n                <select\n                  onChange={(e) => this.handleEventChange(e)}\n                  defaultValue={this.props.currentShelf}\n                >\n                  <option value=\"move\" disabled>\n                    Move to...\n                  </option>\n                  <option value=\"currentlyReading\">Currently Reading</option>\n                  <option value=\"wantToRead\">Want to Read</option>\n                  <option value=\"read\">Read</option>\n                  <option value=\"none\">None</option>\n                </select>\n              </div>\n            </div>\n            <div className=\"book-title\">{this.props.title}</div>\n            <div className=\"book-authors\">{this.props.author}</div>\n          </div>\n        </li>\n      </Fragment>\n    );\n  }\n}\n","import React from 'react';\nimport Book from './Book';\n\nexport default function CurrentlyReading(props) {\n  let books = props.books.map((book) => {\n    return (\n      <Book\n        book={book}\n        image={book.imageLinks.smallThumbnail}\n        title={book.title}\n        author={book.authors}\n        id={book.id}\n        key={book.id}\n        updateBookshelves={props.updateBookshelves}\n        currentShelf=\"currentlyReading\"\n      />\n    );\n  });\n  return (\n    <div className=\"bookshelf\">\n      <h2 className=\"bookshelf-title\">Currently Reading</h2>\n      <div className=\"bookshelf-books\">\n        <ol className=\"books-grid\">{books}</ol>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport Book from './Book';\n\nexport default function Read(props) {\n  let books = props.books.map((book) => {\n    return (\n      <Book\n        image={book.imageLinks.smallThumbnail}\n        title={book.title}\n        author={book.authors}\n        id={book.id}\n        key={book.id}\n        book={book}\n        updateBookshelves={props.updateBookshelves}\n        currentShelf=\"read\"\n      />\n    );\n  });\n  return (\n    <div className=\"bookshelf\">\n      <h2 className=\"bookshelf-title\">Read</h2>\n      <div className=\"bookshelf-books\">\n        <ol className=\"books-grid\">{books}</ol>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport Book from './Book';\n\nexport default function wantToRead(props) {\n  let books = props.books.map((book) => {\n    return (\n      <Book\n        image={book.imageLinks.smallThumbnail}\n        title={book.title}\n        author={book.authors}\n        id={book.id}\n        book={book}\n        key={book.id}\n        updateBookshelves={props.updateBookshelves}\n        currentShelf=\"wantToRead\"\n      />\n    );\n  });\n  return (\n    <div className=\"bookshelf\">\n      <h2 className=\"bookshelf-title\">Want To Read</h2>\n      <div className=\"bookshelf-books\">\n        <ol className=\"books-grid\">{books}</ol>\n      </div>\n    </div>\n  );\n}\n","import React, { Fragment } from 'react';\n\nexport default function Header() {\n  return (\n    <Fragment>\n      <div className=\"list-books\">\n        <div className=\"list-books-title\">\n          <h1>MyReads</h1>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n","import React, { Component, Fragment } from 'react';\nimport * as BookAPI from '../BooksAPI';\n\nexport default class Book extends Component {\n  addBookToShelf = async (e) => {\n    await BookAPI.update(this.props.book, e.target.value);\n    this.props.updateBookshelves();\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <li>\n          <div className=\"book\">\n            <div className=\"book-top\">\n              <div\n                className=\"book-cover\"\n                style={{\n                  width: 128,\n                  height: 193,\n                  backgroundImage: `url(${this.props.image})`,\n                }}\n              ></div>\n              <div className=\"book-shelf-changer\">\n                <select\n                  onChange={(e) => this.addBookToShelf(e)}\n                  defaultValue={this.props.currentShelf}\n                >\n                  <option value=\"move\" disabled>\n                    Move to...\n                  </option>\n                  <option value=\"currentlyReading\">Currently Reading</option>\n                  <option value=\"wantToRead\">Want to Read</option>\n                  <option value=\"read\">Read</option>\n                  <option value=\"none\">None</option>\n                </select>\n              </div>\n            </div>\n            <div className=\"book-title\">{this.props.title}</div>\n            <div className=\"book-authors\">{this.props.author}</div>\n          </div>\n        </li>\n      </Fragment>\n    );\n  }\n}\n","import React from 'react';\nimport SearchedBook from './SearchedBook';\n\nexport default function SearchedBooks(props) {\n  let books = null;\n  if (props.books) {\n    books = props.books.map((book) => {\n      return (\n        <SearchedBook\n          image={book.imageLinks.smallThumbnail}\n          title={book.title}\n          author={book.authors}\n          id={book.id}\n          book={book}\n          key={book.id}\n          updateBookshelves={props.updateBookshelves}\n          currentShelf={book.shelf}\n        />\n      );\n    });\n  }\n\n  return (\n    <div className=\"bookshelf\">\n      {/* <h2 className=\"bookshelf-title\">Want To Read</h2> */}\n      <div className=\"bookshelf-books\">\n        <ol className=\"books-grid\">{books}</ol>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport SearchedBooks from './SearchedBooks';\nimport { withRouter } from 'react-router-dom';\n\nfunction SearchResults(props) {\n  return (\n    <div className=\"search-books\">\n      <div className=\"search-books-bar\">\n        <button\n          className=\"close-search\"\n          onClick={() => {\n            props.history.push('/');\n            props.clearSearch();\n          }}\n        >\n          Close\n        </button>\n        <div className=\"search-books-input-wrapper\">\n          <input\n            onChange={(e) => props.searchForBooks(e)}\n            type=\"text\"\n            placeholder=\"Search by title or author\"\n          />\n        </div>\n      </div>\n      <div className=\"search-books-results\">\n        <ol className=\"books-grid\">\n          {props.books.length ? (\n            <div>\n              {' '}\n              <SearchedBooks\n                books={props.books}\n                addSearchedBook={props.updateBookshelves}\n                updateBookshelves={props.updateBookshelves}\n              />\n            </div>\n          ) : (\n            <div>No books found, please search again</div>\n          )}\n        </ol>\n      </div>\n    </div>\n  );\n}\n\nexport default withRouter(SearchResults);\n","import React, { Fragment } from 'react';\nimport * as BooksAPI from './BooksAPI';\nimport './App.css';\nimport CurrentlyReading from './components/CurrentlyReading';\nimport Read from './components/Read';\nimport WantToRead from './components/WantToRead';\nimport Header from './components/Header';\nimport SearchResults from './components/SearchResults';\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\n\nclass BooksApp extends React.Component {\n  state = {\n    currentlyReading: [],\n    wantToRead: [],\n    read: [],\n    searchedBooks: [],\n    showSearchPage: false,\n  };\n\n  clearSearch = () => {\n    let emptyArray = [];\n    this.setState({\n      searchedBooks: emptyArray,\n    });\n  };\n\n  searchForBooks = async (e) => {\n    let emptyArray = [];\n    //Below resets the state to nothing found if the user deletes the search input so it is blank again.\n    if (e.target.value === '') {\n      return this.setState({\n        searchedBooks: emptyArray,\n      });\n    }\n\n    // Below i search the database for results\n    const results = await BooksAPI.search(e.target.value);\n\n    // Below if the server returns an error object which states nothing found I will clear the state of searchedBooks\n    // and treat them as none found rather than error\n    if (results.error) {\n      return this.setState({\n        searchedBooks: emptyArray,\n      });\n    }\n\n    //Here I will filter out results which dont have an thumbnail image\n    let filteredResults = results.filter((book) => {\n      return book.imageLinks;\n    });\n\n    // Now I will compare the list against my list of books and see if any are in there and if so then i will\n    // add the shelf to the book object so a default value can be given when the book is rendered.\n    // firstly using the spread operator i will join my arrays together\n\n    const allMyBooks = [\n      ...this.state.currentlyReading,\n      ...this.state.read,\n      ...this.state.wantToRead,\n    ];\n\n    // Below I am creating a new array so I dont mutate the state directly and then I am adding a shelf to each book object\n\n    let newArrayOfBooks = filteredResults.map((searchedBook) => {\n      let shelf = 'none';\n      allMyBooks.map((myBook) => {\n        if (searchedBook.id === myBook.id) {\n          return (shelf = myBook.shelf);\n        } else {\n          return (searchedBook.shelf = shelf);\n        }\n      });\n      return (searchedBook.shelf = shelf);\n    });\n\n    //Here I will filter out results which dont have an thumbnail image\n    newArrayOfBooks = results.filter((book) => {\n      return book.imageLinks;\n    });\n\n    this.setState({\n      searchedBooks: newArrayOfBooks,\n    });\n  };\n\n  //Here I make a api request to get books and place them on the correct shelf based on\n  // their data about shelf.\n\n  updateBookshelves = async () => {\n    let booksList = await BooksAPI.getAll();\n    const currentlyReading = booksList.filter(\n      (book) => book.shelf === 'currentlyReading'\n    );\n    this.setState({\n      currentlyReading,\n    });\n    const wantToRead = booksList.filter((book) => book.shelf === 'wantToRead');\n    this.setState({\n      wantToRead,\n    });\n    const read = booksList.filter((book) => book.shelf === 'read');\n    this.setState({\n      read,\n    });\n  };\n\n  componentDidMount = () => {\n    this.updateBookshelves();\n  };\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Fragment>\n          \n            <BrowserRouter  basename={process.env.PUBLIC_URL}>\n          <Route\n            exact\n            path=\"/search\"\n            render={() => (\n              <SearchResults\n                books={this.state.searchedBooks}\n                addSearchedBook={this.updateBookshelves}\n                updateBookshelves={this.updateBookshelves}\n                searchForBooks={this.searchForBooks}\n                clearSearch={this.clearSearch}\n              />\n            )}\n          />\n\n          <div className=\"list-books-content\">\n            <div>\n              <Route\n                exact\n                path=\"/\"\n                render={() => (\n                  <Fragment>\n                    <Header />\n                    <CurrentlyReading\n                      books={this.state.currentlyReading}\n                      updateBookshelves={this.updateBookshelves}\n                      currentShelf=\"currentlyReading\"\n                    />\n                    <WantToRead\n                      books={this.state.wantToRead}\n                      updateBookshelves={this.updateBookshelves}\n                      currentShelf=\"wantToRead\"\n                    />\n                    <Read\n                      books={this.state.read}\n                      updateBookshelves={this.updateBookshelves}\n                      currentShelf=\"read\"\n                    />\n                    <div className=\"open-search\">\n                      <Link className=\"button\" to=\"/search\">\n                        Add a book\n                      </Link>\n                    </div>\n                  </Fragment>\n                )}\n              />\n            </div>\n          </div>\n         </BrowserRouter>\n        </Fragment>\n      </div>\n    );\n  }\n}\n\nexport default BooksApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}